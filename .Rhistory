for (i in 1:len_subs) {
l <- data2[[i]]$users
if (length(data2[[i]]$users) == 0) next
l2 <- lapply(l, function(x) lapply(x, function(x) ifelse(is.null(x), NA, x)))
df_tmp <- data.frame(matrix(unlist(l2), nrow=length(l2), byrow=T))
df_all <- if (exists('df_all')) rbind(df_all,df_tmp) else df_tmp
}
df_all
data2[[1]]
data2[[1]]$id
data2[[1]]$alm_subscription
df_tmp
cbind(df_tmp, data2[[1]]$id)
i
id <- data2[[i]]$id
alm_subscription <- data2[[i]]$alm_subscription
id
alm_subscription
cbind(df_tmp, id, alm_subscription)
len_subs <- length(data2)
rm(df_all)
for (i in 1:len_subs) {
id <- data2[[i]]$id
alm_subscription <- data2[[i]]$alm_subscription
l <- data2[[i]]$users
if (length(data2[[i]]$users) == 0) next
l2 <- lapply(l, function(x) lapply(x, function(x) ifelse(is.null(x), NA, x)))
df1 <- data.frame(matrix(unlist(l2), nrow=length(l2), byrow=T))
df2 <- cbind(id, alm_subscription, df_tmp)
df3 <- if (exists('df3')) rbind(df3,df2) else df2
}
df3
head(df3)
data2[[i]]
colnames(df) <- c('sub_id','alm_sub_id','user_id','alm_user_id','last_accessed_at')
colnames(df3) <- c('sub_id','alm_sub_id','user_id','alm_user_id','last_accessed_at')
head(df3)
head(df3, 50)
download.file(fileUrl, destfile = "./", method = "curl")
len_subs <- length(data2)
rm(df_all)
for (i in 1:len_subs) {
id <- data2[[i]]$id
alm_subscription <- data2[[i]]$alm_subscription
l <- data2[[i]]$users
if (length(data2[[i]]$users) == 0) next
l2 <- lapply(l, function(x) lapply(x, function(x) ifelse(is.null(x), NA, x)))
df1 <- data.frame(matrix(unlist(l2), nrow=length(l2), byrow=T))
df2 <- cbind(id, alm_subscription, df_tmp)
df3 <- if (exists('df3')) rbind(df3,df2) else df2
}
colnames(df3) <- c('sub_id','alm_sub_id','user_id','alm_user_id','last_accessed_at')
len_subs <- length(data2)
rm(df_all)
for (i in 1:len_subs) {
id <- data2[[i]]$id
alm_subscription <- data2[[i]]$alm_subscription
l <- data2[[i]]$users
if (length(data2[[i]]$users) == 0) next
l2 <- lapply(l, function(x) lapply(x, function(x) ifelse(is.null(x), NA, x)))
df1 <- data.frame(matrix(unlist(l2), nrow=length(l2), byrow=T))
df2 <- cbind(id, alm_subscription, df_tmp)
df3 <- if (exists('df3')) rbind(df3,df2) else df2
}
rm(df_all)
len_subs <- length(data2)
rm(df3)
for (i in 1:len_subs) {
id <- data2[[i]]$id
alm_subscription <- data2[[i]]$alm_subscription
l <- data2[[i]]$users
if (length(data2[[i]]$users) == 0) next
l2 <- lapply(l, function(x) lapply(x, function(x) ifelse(is.null(x), NA, x)))
df1 <- data.frame(matrix(unlist(l2), nrow=length(l2), byrow=T))
df2 <- cbind(id, alm_subscription, df_tmp)
df3 <- if (exists('df3')) rbind(df3,df2) else df2
}
colnames(df3) <- c('sub_id','alm_sub_id','user_id','alm_user_id','last_accessed_at')
head(df3, 50)
library(shiny)
setwd("~/Dev/non_work_projects")
runApp("github_hot_or_not")
load('data/repos_stars.RData')
setwd("~/Dev/non_work_projects/github_hot_or_not")
load('data/repos_stars.RData')
str(df)
head(df,100)
df2 <- df %>%
select(1:100,)
df2 <- head(df,100)
df2 <- df[1:100,]
df2
source("creds/creds_bigquery.R")
sql <- paste(readLines("lib/query_repos_stars.sql", warn=F), collapse="\n")
df <- query_exec("publicdata", "samples", sql, billing = billing_project, max_pages = Inf)
save(df, file = 'data/repos_stars.RData')
load('data/repos_stars.RData')
str(df)
df2 <- df[1:100,]
df2 <- df2 %>%
mutate(
date_created = as.Date(date),
date_created_str = as.character(date_created),
age_days = as.numeric(today() - date_created),
stars_per_day = round(stars/age_days, 1),
log_forks = log10(forks),
log_forks = ifelse(is.finite(log_forks) == F, 0, log_forks)
)
df2
breakpoints <- sprintf("%02d", round(quantile(df2$stars_per_day)))
breakpoints
labels <- character()
for (i in 1:(length(breakpoints) - 1)) {
labels[i] <- paste0(sprintf("%02s", breakpoints[i]), "-", sprintf("%02s", breakpoints[i+1]))
}
labels
## Add groups and arrange
df2 <- df2 %>%
mutate(
group = cut(stars_per_day,
breaks = breakpoints,
label = labels,
include.lowest = T,
right = T,
ordered = T),
group = ordered(group, levels = c('',labels))
) %>%
arrange(group)
df2
str(df2)
p2 <- nPlot(stars ~ age_days, group = 'group', data = df2, type = 'scatterChart')
p2
p2 <- nPlot(stars ~ age_days, group = 'group', data = df2, type = 'scatterChart')
p2$yAxis(axisLabel = 'Stars')
p2$xAxis(axisLabel = 'Age in Days')
#   p2$chart(color = color)
p2$chart(size = '#! function(d){return d.log_forks} !#')
p2$chart(tooltipContent = "#!
function(key, x, y, d){
return '<h3>' + d.point.repository_name + '</h3>' +
'<p> <b> Language = ' + d.point.repository_language + ' </b> </p>' +
'<p>' + '<b>' +  d.point.watch_per_day + ' Stars/Day' + '</b>' +'</p>' +
'<p> Age in Days = ' +  d.point.age_days + '</p>' +
'<p> Stars = ' +  d.point.repository_watchers + '</p>' +
'<p> Forks = ' +  d.point.repository_forks + '</p>' +
'<p> Date Created = ' +  d.point.date_created_str + '</p>'
}
!#")
p2
p2
p2 <- nPlot(stars ~ age_days, group = 'group', data = df2, type = 'scatterChart')
p2$yAxis(axisLabel = 'Stars')
p2$xAxis(axisLabel = 'Age in Days')
#   p2$chart(color = color)
p2$chart(size = '#! function(d){return d.log_forks} !#')
p2$chart(tooltipContent = "#!
function(key, x, y, d){
return '<h3>' + d.point.repository_name + '</h3>' +
'<p> <b> Language = ' + d.point.repository_language + ' </b> </p>' +
'<p>' + '<b>' +  d.point.stars_per_day + ' Stars/Day' + '</b>' +'</p>' +
'<p> Age in Days = ' +  d.point.age_days + '</p>' +
'<p> Stars = ' +  d.point.repository_watchers + '</p>' +
'<p> Forks = ' +  d.point.repository_forks + '</p>' +
'<p> Date Created = ' +  d.point.date_created_str + '</p>'
}
!#")
p2
p2 <- nPlot(stars ~ age_days, group = 'group', data = df2, type = 'scatterChart')
p2$yAxis(axisLabel = 'Stars')
p2$xAxis(axisLabel = 'Age in Days')
#   p2$chart(color = color)
p2$chart(size = '#! function(d){return d.log_forks} !#')
p2$chart(tooltipContent = "#!
function(key, x, y, d){
return '<h3>' + d.point.repository_name + '</h3>' +
'<p> <b> Language = ' + d.point.repository_language + ' </b> </p>' +
'<p>' + '<b>' +  d.point.stars_per_day + ' Stars/Day' + '</b>' +'</p>' +
'<p> Age in Days = ' +  d.point.age_days + '</p>' +
'<p> Stars = ' +  d.point.stars + '</p>' +
'<p> Forks = ' +  d.point.forks + '</p>' +
'<p> Date Created = ' +  d.point.date_created_str + '</p>'
}
!#")
p2
df2 <- df[1:300,]
## Initial crunch
df2 <- df2 %>%
mutate(
date_created = as.Date(date),
date_created_str = as.character(date_created),
age_days = as.numeric(today() - date_created),
stars_per_day = round(stars/age_days, 1),
log_forks = log10(forks),
log_forks = ifelse(is.finite(log_forks) == F, 0, log_forks)
)
##| Set breakpoints and labels
breakpoints <- sprintf("%02d", round(quantile(df2$stars_per_day)))
labels <- character()
for (i in 1:(length(breakpoints) - 1)) {
labels[i] <- paste0(sprintf("%02s", breakpoints[i]), "-", sprintf("%02s", breakpoints[i+1]))
}
## Add groups and arrange
df2 <- df2 %>%
mutate(
group = cut(stars_per_day,
breaks = breakpoints,
label = labels,
include.lowest = T,
right = T,
ordered = T),
group = ordered(group, levels = c('',labels))
) %>%
arrange(group)
p2 <- nPlot(stars ~ age_days, group = 'group', data = df2, type = 'scatterChart')
p2$yAxis(axisLabel = 'Stars')
p2$xAxis(axisLabel = 'Age in Days')
#   p2$chart(color = color)
p2$chart(size = '#! function(d){return d.log_forks} !#')
p2$chart(tooltipContent = "#!
function(key, x, y, d){
return '<h3>' + d.point.repository_name + '</h3>' +
'<p> <b> Language = ' + d.point.repository_language + ' </b> </p>' +
'<p>' + '<b>' +  d.point.stars_per_day + ' Stars/Day' + '</b>' +'</p>' +
'<p> Age in Days = ' +  d.point.age_days + '</p>' +
'<p> Stars = ' +  d.point.stars + '</p>' +
'<p> Forks = ' +  d.point.forks + '</p>' +
'<p> Date Created = ' +  d.point.date_created_str + '</p>'
}
!#")
p2
df2 <- df[1:1000,]
## Initial crunch
df2 <- df2 %>%
mutate(
date_created = as.Date(date),
date_created_str = as.character(date_created),
age_days = as.numeric(today() - date_created),
stars_per_day = round(stars/age_days, 1),
log_forks = log10(forks),
log_forks = ifelse(is.finite(log_forks) == F, 0, log_forks)
)
##| Set breakpoints and labels
breakpoints <- sprintf("%02d", round(quantile(df2$stars_per_day)))
labels <- character()
for (i in 1:(length(breakpoints) - 1)) {
labels[i] <- paste0(sprintf("%02s", breakpoints[i]), "-", sprintf("%02s", breakpoints[i+1]))
}
## Add groups and arrange
df2 <- df2 %>%
mutate(
group = cut(stars_per_day,
breaks = breakpoints,
label = labels,
include.lowest = T,
right = T,
ordered = T),
group = ordered(group, levels = c('',labels))
) %>%
arrange(group)
createPlotRepo2 <- function(df2) {
str(df2)
p2 <- nPlot(stars ~ age_days, group = 'group', data = df2, type = 'scatterChart')
p2$yAxis(axisLabel = 'Stars')
p2$xAxis(axisLabel = 'Age in Days')
#   p2$chart(color = color)
p2$chart(size = '#! function(d){return d.log_forks} !#')
p2$chart(tooltipContent = "#!
function(key, x, y, d){
return '<h3>' + d.point.repository_name + '</h3>' +
'<p> <b> Language = ' + d.point.repository_language + ' </b> </p>' +
'<p>' + '<b>' +  d.point.stars_per_day + ' Stars/Day' + '</b>' +'</p>' +
'<p> Age in Days = ' +  d.point.age_days + '</p>' +
'<p> Stars = ' +  d.point.stars + '</p>' +
'<p> Forks = ' +  d.point.forks + '</p>' +
'<p> Date Created = ' +  d.point.date_created_str + '</p>'
}
!#")
p2
df3 <- select(df2, stars, age_days, group, log_forks,
repository_name, repository_langugae, stars_per_day,
forks, date_created_str)
df3 <- select(df2, stars, age_days, group, log_forks,
repository_name, repository_language, stars_per_day,
forks, date_created_str)
p2 <- nPlot(stars ~ age_days, group = 'group', data = df3, type = 'scatterChart')
p2$yAxis(axisLabel = 'Stars')
p2$xAxis(axisLabel = 'Age in Days')
#   p2$chart(color = color)
p2$chart(size = '#! function(d){return d.log_forks} !#')
p2$chart(tooltipContent = "#!
function(key, x, y, d){
return '<h3>' + d.point.repository_name + '</h3>' +
'<p> <b> Language = ' + d.point.repository_language + ' </b> </p>' +
'<p>' + '<b>' +  d.point.stars_per_day + ' Stars/Day' + '</b>' +'</p>' +
'<p> Age in Days = ' +  d.point.age_days + '</p>' +
'<p> Stars = ' +  d.point.stars + '</p>' +
'<p> Forks = ' +  d.point.forks + '</p>' +
'<p> Date Created = ' +  d.point.date_created_str + '</p>'
}
!#")
p2
df3 <- select(df2, stars, age_days, group, log_forks,
repository_name, repository_language, stars_per_day,
forks, date_created_str)
p2 <- nPlot(stars ~ age_days, group = 'group', data = df3, type = 'scatterChart')
p2$yAxis(axisLabel = 'Stars')
p2$xAxis(axisLabel = 'Age in Days')
#   p2$chart(color = color)
p2$chart(size = '#! function(d){return d.forks} !#')
p2$chart(tooltipContent = "#!
function(key, x, y, d){
return '<h3>' + d.point.repository_name + '</h3>' +
'<p> <b> Language = ' + d.point.repository_language + ' </b> </p>' +
'<p>' + '<b>' +  d.point.stars_per_day + ' Stars/Day' + '</b>' +'</p>' +
'<p> Age in Days = ' +  d.point.age_days + '</p>' +
'<p> Stars = ' +  d.point.stars + '</p>' +
'<p> Forks = ' +  d.point.forks + '</p>' +
'<p> Date Created = ' +  d.point.date_created_str + '</p>'
}
!#")
p2
df2 <- df[1:1000,]
## Initial crunch
df2 <- df2 %>%
mutate(
date_created = as.Date(date),
date_created_str = as.character(date_created),
age_days = as.numeric(today() - date_created),
stars_per_day = round(stars/age_days, 1),
log_stars = log10(stars),
log_forks = log10(forks),
log_stars = ifelse(is.finite(log_stars) == F, 0, log_stars),
log_forks = ifelse(is.finite(log_forks) == F, 0, log_forks)
)
##| Set breakpoints and labels
breakpoints <- sprintf("%02d", round(quantile(df2$stars_per_day)))
labels <- character()
for (i in 1:(length(breakpoints) - 1)) {
labels[i] <- paste0(sprintf("%02s", breakpoints[i]), "-", sprintf("%02s", breakpoints[i+1]))
}
## Add groups and arrange
df2 <- df2 %>%
mutate(
group = cut(stars_per_day,
breaks = breakpoints,
label = labels,
include.lowest = T,
right = T,
ordered = T),
group = ordered(group, levels = c('',labels))
) %>%
arrange(group)
df3 <- select(df2, stars, log_stars, age_days, group, log_forks,
repository_name, repository_language, stars_per_day,
forks, date_created_str)
p2 <- nPlot(log_stars ~ age_days, group = 'group', data = df3, type = 'scatterChart')
p2$yAxis(axisLabel = 'Stars')
p2$xAxis(axisLabel = 'Age in Days')
#   p2$chart(color = color)
p2$chart(size = '#! function(d){return d.forks} !#')
p2$yAxis(tickFormat="#! function(d) {return Math.round(Math.pow(10, d));}!#")
p2$chart(tooltipContent = "#!
function(key, x, y, d){
return '<h3>' + d.point.repository_name + '</h3>' +
'<p> <b> Language = ' + d.point.repository_language + ' </b> </p>' +
'<p>' + '<b>' +  d.point.stars_per_day + ' Stars/Day' + '</b>' +'</p>' +
'<p> Age in Days = ' +  d.point.age_days + '</p>' +
'<p> Stars = ' +  d.point.stars + '</p>' +
'<p> Forks = ' +  d.point.forks + '</p>' +
'<p> Date Created = ' +  d.point.date_created_str + '</p>'
}
!#")
p2
sql <- paste(readLines("lib/query_repos_stars.sql", warn=F), collapse="\n")
df <- query_exec("publicdata", "samples", sql, billing = billing_project, max_pages = Inf)
save(df, file = 'data/repos_stars.RData')
setwd("~/Dev/projects/shiny/apps/example_navigation")
setwd("~/Dev/projects/shiny/apps/")
runApp("example_navigation")
library(shiny)
setwd("~/Dev/non_work_projects")
runApp("github_hot_or_not")
df2 <- df[1:1000,]
## Initial crunch
df2 <- df2 %>%
mutate(
date_created = as.Date(date),
date_created_str = as.character(date_created),
age_days = as.numeric(today() - date_created),
stars_per_day = round(stars/age_days, 1),
log_stars = log10(stars),
log_forks = log10(forks),
log_stars = ifelse(is.finite(log_stars) == F, 0, log_stars),
log_forks = ifelse(is.finite(log_forks) == F, 0, log_forks)
)
breakpoints <- sprintf("%02d", round(quantile(df2$stars_per_day)))
breakpoints
round(quantile(df2$stars_per_day)
)
round(quantile(df2$stars_per_day),1)
round(quantile(df2$stars_per_day),1))
round(quantile(df2$stars_per_day),1)
breakpoints <- sprintf("%02d", round(quantile(df2$stars_per_day),1))
df2$stars_per_day
quantile(df2$stars_per_day)
round(quantile(df2$stars_per_day))
round(quantile(df2$stars_per_day),1)
floor(quantile(df2$stars_per_day))
breakpoints <- sprintf("%02d", floor(quantile(df2$stars_per_day)))
breakpoints
breakpoints[-1]
ceiling(quantile(df2$stars_per_day)
ceiling(quantile(df2$stars_per_day))
ceiling(quantile(df2$stars_per_day))
breakpoints[1]
as.numeric(breakpoints[1])
breakpoints <- ceiling(quantile(df2$stars_per_day))
breakpoints
breakpoints[1]
breakpoints[1] <- 0
breakpoints
breakpoints <- sprintf("%02d", breakpoints)
breakpoints
library(shiny)
setwd("~/Dev/non_work_projects")
runApp("github_hot_or_not")
crunchDataRepoTop <- function() {
df2 <- df[1:1000,]
## Initial crunch
df2 <- df2 %>%
mutate(
date_created = as.Date(date),
date_created_str = as.character(date_created),
age_days = as.numeric(today() - date_created),
stars_per_day = round(stars/age_days, 1),
log_stars = log10(stars),
log_forks = log10(forks),
log_stars = ifelse(is.finite(log_stars) == F, 0, log_stars),
log_forks = ifelse(is.finite(log_forks) == F, 0, log_forks)
)
##| Set breakpoints and labels
breakpoints <- ceiling(quantile(df2$stars_per_day))
breakpoints[1] <- 0
breakpoints <- sprintf("%02d", breakpoints)
labels <- character()
for (i in 1:(length(breakpoints) - 1)) {
labels[i] <- paste0(sprintf("%02s", breakpoints[i]), "-", sprintf("%02s", breakpoints[i+1]))
}
## Add groups and arrange
df2 <- df2 %>%
mutate(
group = cut(stars_per_day,
breaks = breakpoints,
label = labels,
include.lowest = T,
right = T,
ordered = T),
group = ordered(group, levels = c('',labels))
) %>%
arrange(group)
return(df2)
}
df3 <- crunchDataRepoTop()
str(df3)
library(shiny)
setwd("~/Dev/non_work_projects")
runApp("github_hot_or_not")
df2 <- crunchDataRepoTop()
lang_list <- sort(unique(df2$repository_language))
lang_list
library(shiny)
setwd("~/Dev/non_work_projects")
runApp("github_hot_or_not")
df3 <- crunchDataRepoTop()
df3 <- crunchDataRepoTop()
library(shiny)
setwd("~/Dev/non_work_projects")
runApp("github_hot_or_not")
df3 <- crunchDataRepoTop()
df3
str(df3)
input <- data.frame(repo_top_language = 'JavaScript')
input
is.null(input$repo_top_language)
df3$group[ !(df3$repository_language %in% input$repo_top_language)] <- ''
df3$group
df3 <- arrange(df3, group)
df3
library(shiny)
setwd("~/Dev/non_work_projects")
runApp("github_hot_or_not")
str(df3)
df4 <- filter(df3, group != '')
df4 <- arrange(df4, desc(stars))
df4$rank <- as.numeric(rownames(df4))
str(df4)
library(shiny)
setwd("~/Dev/non_work_projects")
runApp("github_hot_or_not")
setwd("~/Dev/non_work_projects/github_hot_or_not")
sql <- paste(readLines("lib/query_repos.sql", warn=F), collapse="\n")
df <- query_exec("publicdata", "samples", sql, billing = billing_project, max_pages = Inf)
save(df, file = 'data/repos.RData')
str(df)
library(shiny)
setwd("~/Dev/non_work_projects")
runApp("github_hot_or_not")
sql <- paste(readLines("lib/query_repos.sql", warn=F), collapse="\n")
df <- query_exec("publicdata", "samples", sql, billing = billing_project, max_pages = Inf)
setwd("~/Dev/non_work_projects/github_hot_or_not")
sql <- paste(readLines("lib/query_repos.sql", warn=F), collapse="\n")
df <- query_exec("publicdata", "samples", sql, billing = billing_project, max_pages = Inf)
